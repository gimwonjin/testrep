{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub1\\\\react\\\\05-react_starter\\\\src\\\\ToDoList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ToDoList(props) {\n  _s();\n  // input 변화가 있을때마다 콘솔에 찍어보기\n  // 값을 가지고 있어야 한다. ==> 관리를 해야한다. ==> state 로 만들어야한다.\n  const [toDo, setToDo] = useState(\"\");\n  const [list, setList] = useState([]);\n  const onChange = e => {\n    setToDo(e.target.value);\n  };\n  // 버튼 클릭했을떄(form 태그 안에 있으니 submit 이벤트로) 화면에 나오도록 해야한다.\n  // 화면에 나오는 todolist는 계속 추가가 되어야 한다. ==> 배열\n  const handleSubmit = e => {\n    e.preventDefault(); // 기본 submit 이벤트를 막은다.\n    if (toDo === \"\") setList(prevItems => [...prevItems, ...setToDo]);\n    setToDo(\"\");\n  };\n\n  // 배열의 원소 갯수만큼 화면에 렌더링 되어야 한다.\n\n  // 배열의 원소 갯수만큼 숫자가 표시 되어야 한다.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"My To Do (\", ToDoList.length, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: onChange,\n        value: toDo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add To do\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: list.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(ToDoList, \"u/nns8ATxrT9imB8k0X/A9SYpMw=\");\n_c = ToDoList;\nexport default ToDoList;\nvar _c;\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ToDoList","props","_s","toDo","setToDo","list","setList","onChange","e","target","value","handleSubmit","preventDefault","prevItems","children","length","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","item","idx","_c","$RefreshReg$"],"sources":["C:/Users/admin/Documents/GitHub1/react/05-react_starter/src/ToDoList.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction ToDoList(props) {\r\n  // input 변화가 있을때마다 콘솔에 찍어보기\r\n  // 값을 가지고 있어야 한다. ==> 관리를 해야한다. ==> state 로 만들어야한다.\r\n  const [toDo, setToDo] = useState(\"\");\r\n  const [list, setList] = useState([]);\r\n  const onChange = (e) => {\r\n    setToDo(e.target.value);\r\n  };\r\n  // 버튼 클릭했을떄(form 태그 안에 있으니 submit 이벤트로) 화면에 나오도록 해야한다.\r\n  // 화면에 나오는 todolist는 계속 추가가 되어야 한다. ==> 배열\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); // 기본 submit 이벤트를 막은다.\r\n    if (toDo === \"\") setList((prevItems) => [...prevItems, ...setToDo]);\r\n    setToDo(\"\");\r\n  };\r\n\r\n  // 배열의 원소 갯수만큼 화면에 렌더링 되어야 한다.\r\n\r\n  // 배열의 원소 갯수만큼 숫자가 표시 되어야 한다.\r\n\r\n  return (\r\n    <div>\r\n      <h1>My To Do ({ToDoList.length})</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <input onChange={onChange} value={toDo} />\r\n        <button>Add To do</button>\r\n      </form>\r\n      <hr />\r\n      <ul>\r\n        {list.map((item) => (\r\n          <li key={idx}>{item}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACvB;EACA;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMU,QAAQ,GAAIC,CAAC,IAAK;IACtBJ,OAAO,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACzB,CAAC;EACD;EACA;EACA,MAAMC,YAAY,GAAIH,CAAC,IAAK;IAC1BA,CAAC,CAACI,cAAc,CAAC,CAAC,CAAC,CAAC;IACpB,IAAIT,IAAI,KAAK,EAAE,EAAEG,OAAO,CAAEO,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAE,GAAGT,OAAO,CAAC,CAAC;IACnEA,OAAO,CAAC,EAAE,CAAC;EACb,CAAC;;EAED;;EAEA;;EAEA,oBACEL,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,GAAI,YAAU,EAACd,QAAQ,CAACe,MAAM,EAAC,GAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrCpB,OAAA;MAAMqB,QAAQ,EAAET,YAAa;MAAAG,QAAA,gBAC3Bf,OAAA;QAAOQ,QAAQ,EAAEA,QAAS;QAACG,KAAK,EAAEP;MAAK;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC1CpB,OAAA;QAAAe,QAAA,EAAQ;MAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC,eACPpB,OAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNpB,OAAA;MAAAe,QAAA,EACGT,IAAI,CAACgB,GAAG,CAAEC,IAAI,iBACbvB,OAAA;QAAAe,QAAA,EAAeQ;MAAI,GAAVC,GAAG;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CACzB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACjB,EAAA,CAnCQF,QAAQ;AAAAwB,EAAA,GAARxB,QAAQ;AAqCjB,eAAeA,QAAQ;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}